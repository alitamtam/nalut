generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model projects { // Changed from articles to projects
  id         Int       @id @default(autoincrement())
  title      String
  link       String?   // New column for storing project links
  content    String    // Renamed from article to content
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime?  @db.Timestamptz(6)
  authorId   Int
  author     user      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model user {
  id            Int        @id @default(autoincrement())
  first_name    String
  last_name     String
  username      String     @unique
  email         String     @unique
  password      String
  description   String?
  created_at    DateTime   @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?  @db.Timestamptz(6)
  role          String     @default("member")
  profile       profile?
  projects      projects[]  // Updated relation name
  events        event[]    // One-to-many relationship with Event (opposite of owner)
  publications  publications[]
}

model profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  image  String?   // Column for storing the base64 image
  userId Int     @unique
  user   user    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model event {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  location    String?
  startTime   DateTime
  endTime     DateTime
  ownerId     Int
  owner       user      @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image       String?   // New column for storing event images
  link        String?   // New column for storing event links
}

model topic {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  iconClass   String   // Class name for icon styling
  publications publications[] // Relation to Publications
}

model publications {
  id          Int       @id @default(autoincrement())
  title       String
  topicId     Int       // Foreign key to Topic
  topic       topic     @relation(fields: [topicId], references: [id])
  content     String  
  image       String?   // New column for storing the base64 image
  created_at  DateTime  @default(now())
  ownerId     Int       // Assuming the event has an owner (user)
  owner       user      @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
