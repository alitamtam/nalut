generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  username       String       @unique
  email          String       @unique
  password       String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  userRoles      UserRole[]
  Story          Story[]
  Poll           Poll[]
  Incident       Incident[]
  Vehicle        Vehicle[]
}

model Role {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  description    String?
  hierarchyLevel Int          // Determines the role's authority level
  defaultRole    Boolean      @default(false) // Determines if it is a default role

  userRoles      UserRole[]
  permissions    Permission[]
}

model UserRole {
  id             Int          @id @default(autoincrement())
  userId         Int
  roleId         Int
  user           User         @relation(fields: [userId], references: [id])
  role           Role         @relation(fields: [roleId], references: [id])
}

model Permission {
  id             Int          @id @default(autoincrement())
  roleId         Int
  section        String       // E.g., "stories", "events"
  action         String       // E.g., "create", "read", "update", "delete"
  granted        Boolean      @default(false)
  role           Role         @relation(fields: [roleId], references: [id])
}

model Organization {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  type           String
  version        String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  Event          Event[]
}

model Story {
  id             Int          @id @default(autoincrement())
  title          String
  content        String
  authorId       Int
  author         User         @relation(fields: [authorId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Event {
  id             Int          @id @default(autoincrement())
  title          String
  description    String
  date           DateTime
  location       String
  organizerId    Int
  organizer      Organization @relation(fields: [organizerId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Poll {
  id             Int          @id @default(autoincrement())
  question       String
  options        Json
  createdById    Int
  createdBy      User         @relation(fields: [createdById], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Incident {
  id             Int          @id @default(autoincrement())
  type           String
  description    String
  date           DateTime
  location       String
  reportedById   Int
  reportedBy     User         @relation(fields: [reportedById], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Vehicle {
  id             Int          @id @default(autoincrement())
  type           String
  licensePlate   String       @unique
  ownerId        Int
  owner          User         @relation(fields: [ownerId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
