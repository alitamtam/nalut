generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  username       String        @unique
  email          String        @unique
  password       String
  image          String?       // Optional image field
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  userRoles      UserRole[]
  organizationId Int?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  stories        Story[]
  polls          Poll[]
  incidents      Incident[]
  vehicles       Vehicle[]
  news           News[]
  People        People[]
}

model Role {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  description    String?
  hierarchyLevel Int           // Determines the role's authority level
  defaultRole    Boolean       @default(false)

  // Relations
  userRoles      UserRole[]
  permissions    Permission[]
}

model UserRole {
  id      Int  @id @default(autoincrement())
  userId  Int
  roleId  Int

  // Relations
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role    Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId]) // Ensures no duplicate user-role combination
}

model Permission {
  id      Int    @id @default(autoincrement())
  roleId  Int
  section String // E.g., "stories", "events"
  action  String // E.g., "create", "read", "update", "delete"
  granted Boolean @default(false)

  // Relations
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Organization {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  type      String
  version   String?
  image     String?  // Optional image field
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  events    Event[]
  users     User[]
}

model Story {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  image     String?  // Optional image field
  authorId  Int

  // Relations
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  location    String
  image       String?       // Optional image field
  organizerId Int

  // Relations
  organizer   Organization @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Poll {
  id           Int      @id @default(autoincrement())
  question     String
  options      Json     // Store poll options as JSON
  image        String?  // Optional image field
  createdById  Int

  // Relations
  createdBy    User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Incident {
  id            Int      @id @default(autoincrement())
  type          String
  description   String
  date          DateTime
  location      String
  image         String?  // Optional image field
  reportedById  Int

  // Relations
  reportedBy    User     @relation(fields: [reportedById], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Vehicle {
  id           Int      @id @default(autoincrement())
  type         String
  licensePlate String   @unique
  ownerId      Int

  // Relations
  owner        User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([licensePlate]) // Improves query performance for license plate lookups
}

model News {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  image     String?  // Optional image field
  authorId  Int

  // Relations
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model People {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  image       String?  // Optional image field
  userId      Int?     // Optional relation to a user

  // Relations
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
